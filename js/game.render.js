// game.render.js

/**
 * –ü–æ–ª–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –≤—Å–µ—Ö DOM-—á–∞—Å—Ç–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
function renderAll() {
  renderMap();
  renderQuests();
  renderControls();
}

/**
 * –†–µ–Ω–¥–µ—Ä "–∫–∞—Ä—Ç—ã" –ª–æ–∫–∞—Ü–∏–π —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
 */
function renderMap(){
  let html = '';
  for(let i=0;i<ROOMS.length;++i){
    let active = (player.at===i)?'active':'';
    html += `<div class="room ${active}" title="${ROOMS[i].desc}">
      <div class="room-title">${ROOMS[i].name} ${ROOMS[i].icon}</div>`;
    html += `<div class="actors">`;
    if(player.at===i)
      html += `<span class="actor actor-ego" title="–≠—Ç–æ –≤—ã!">üßë‚Äçüíº<br><span class="actor-name">${player.name}</span></span>`;
    npcs.filter(n=>n.at===i).forEach(npc=>{
      html += `<span class="actor actor-npc" title="${npc.desc}">${npc.icon}<br><span class="actor-name">${npc.name}</span></span>`;
    });
    html += `</div><div class="doors">–î–≤–µ—Ä–∏: ${
      ROOMS[i].doors.map(j=>ROOMS[j].name).join(', ')
    }</div></div>`;
  }
  document.getElementById('map').innerHTML = html;
  document.getElementById('stressBar').innerText = player.stress;
  document.getElementById('item').innerText = player.inventory.length ? player.inventory.join(', ') : '–ø—É—Å—Ç–æ';
}

/**
 * –†–µ–Ω–¥–µ—Ä –∫–≤–µ—Å—Ç-–ª–æ–≥–∞
 */
function renderQuests(){
  let q = QUESTS.map(qk => `<li>${qk.name}: <b>${player.quests[qk.id]==='done'?'‚úÖ':(player.quests[qk.id]?'üïì':'‚ùå')}</b> ‚Äî <span class='actor-desc'>${qk.desc}</span></li>`).join('');
  document.getElementById('questlog').innerHTML = "<ul>" + q + "</ul>";
}

/**
 * –†–µ–Ω–¥–µ—Ä –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è)
 */
function renderControls(){
  let html = '';
  let here = player.at;
  let doors = ROOMS[here].doors;
  doors.forEach(idx => {
    // –°–≤–æ—è –ª–∏ —ç—Ç–∞ –∫–æ–º–Ω–∞—Ç–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞
    const isOwnRoom = player.home && Array.isArray(player.home) && player.home.includes(idx);
    let disabled = false;
    if (!isOwnRoom) {
      // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ "–≥–æ—Å—Ç–µ–π": NPC, –∫–æ—Ç–æ—Ä—ã–µ —Ç—É—Ç –Ω–µ home –∏ –Ω–µ boss
      const npcsHere = npcs.filter(n => {
        if (n.home && Array.isArray(n.home) && n.home.includes(idx)) return false;
        if (n.type === 'boss') return false;
        return n.at === idx;
      }).length;
      if (npcsHere + 1 > 3) disabled = true;
    }
    if (disabled) {
      html += `<button class="moveBtn" disabled style="opacity:.5;cursor:not-allowed;">–í ${ROOMS[idx].name} ${ROOMS[idx].icon} (–ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–æ)</button>`;
    } else {
      html += `<button class="moveBtn" onclick="moveTo(${idx})">–í ${ROOMS[idx].name} ${ROOMS[idx].icon}</button>`;
    }
  });
  // –°–ø–µ—Ü–¥–µ–π—Å—Ç–≤–∏—è
  if(ROOMS[here].name==='–ê–∫–≤–∞—Ä–∏—É–º' && !player.inventory.includes('—Ü–≤–µ—Ç–æ–ø—Ä–æ–±–∞') && player.quests.proba==='inprogress'){
    html += `<button class="actionBtn" onclick="makeProba()">–°–¥–µ–ª–∞—Ç—å —Ü–≤–µ—Ç–æ–ø—Ä–æ–±—É</button>`;
  }
  if(ROOMS[here].name==='–õ–∞–∫' && !player.inventory.includes('–ª–∞–∫') && player.quests.proba==='done'){
    html += `<button class="actionBtn" onclick="makeLak()">–°–¥–µ–ª–∞—Ç—å –ª–∞–∫</button>`;
  }
  document.getElementById('control-panel').innerHTML = html;
}
