// –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∞: 6 –∫–æ–º–Ω–∞—Ç, —Å–≤—è–∑—å ‚Äî –∏–Ω–¥–µ–∫—Å —Å–º–µ–∂–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
const ROOMS = [
  { name: '–û—Ñ–∏—Å', neighbors: [1,3] },
  { name: '–ö–æ—Ä–∏–¥–æ—Ä', neighbors: [0,2,4] },
  { name: '–î–≤–µ—Ä—å –ü–†–û–ò–ó–í–û–î–°–¢–í–û', neighbors: [1,5] },
  { name: '–°–∫–ª–∞–¥', neighbors: [0,4] },
  { name: '–ê–∫–≤–∞—Ä–∏—É–º (—Ü–∏—Ñ—Ä–∞)', neighbors: [1,3,5] },
  { name: '–í—ã—Ö–æ–¥ –Ω–∞ 2 —ç—Ç–∞–∂', neighbors: [2,4] },
];

// –ù–∞—á. —Å–æ—Å—Ç–æ—è–Ω–∏–µ
let player = { at: 0, hasProba: false, stress: 0, busy: false }; // at ‚Äî –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã
let inventory = null;

// NPCs
const npcs = [
  {
    name: '–ö–∞—Ç—è', icon: 'üë©‚Äçü¶∞', at: 0, type: 'kvest',
    logic(game) {
      if (game.player.at === this.at) {
        if (!game.player.hasProba) {
          showEvent(
            '–ö–∞—Ç—è: ‚Äú–°–¥–µ–ª–∞–π —Ü–≤–µ—Ç–æ–ø—Ä–æ–±—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!‚Äù<br>–ü–æ–∫–∞ –Ω–µ —Å–¥–µ–ª–∞–µ—à—å, —è –±—É–¥—É —Ö–æ–¥–∏—Ç—å —Å —Ç–æ–±–æ–π.',
            [{text:'–û–∫!', action:()=>{ this.follow = true; } }]
          );
        } else {
          showEvent('–ö–∞—Ç—è: ‚Äú–°–ø–∞—Å–∏–±–æ –∑–∞ —Ü–≤–µ—Ç–æ–ø—Ä–æ–±—É!‚Äù<br>(–ö–∞—Ç—è –¥–æ–≤–æ–ª—å–Ω–∞ –∏ —É—Ö–æ–¥–∏—Ç)', [
            {text:'–û—Ç–¥–∞—Ç—å —Ü–≤–µ—Ç–æ–ø—Ä–æ–±—É', action:()=>{ game.player.hasProba=false; inventory=null; this.follow=false; moveNPC(this,0); }},
          ]);
        }
      }
      if (this.follow) this.at = game.player.at; // –≤—Å–µ–≥–¥–∞ –∑–∞ –∏–≥—Ä–æ–∫–æ–º
    },
    follow: false
  },

  {
    name: '–°–≤–µ—Ç–ª–∞–Ω–∞', icon: 'üë©üèº‚Äçü¶±', at: 0, type: 'barrier',
    logic(game) {
      if (game.player.at === this.at) {
        if (!this.said) {
          game.player.busy = true;
          showEvent(
            '–°–≤–µ—Ç–ª–∞–Ω–∞: ‚Äú–í–∞–º –Ω—É–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, –∞ –ø–æ—Ç–æ–º‚Ä¶ –∞ –µ—â–µ‚Ä¶‚Äù<br>–ü–æ–∫–∞ –Ω–µ —Å–∫–∞–∂–µ—à—å "–•–æ—Ä–æ—à–æ, –º—ã –ø–æ–ø—Ä–æ–±—É–µ–º", —è –Ω–µ –æ—Ç–æ–π–¥—É!',
            [
              {text:'–•–æ—Ä–æ—à–æ, –º—ã –ø–æ–ø—Ä–æ–±—É–µ–º', action:()=>{this.said=true; game.player.busy=false;} },
              {text:'–ù–µ —Ö–æ—á—É', action:()=>{this.said=false; game.player.busy=true;} }
            ]
          );
        }
      }
    },
    said: false
  },

  {
    name: '–ú–∞—Ä–∏–Ω–∞', icon: 'üë©üèª', at: 4, type: 'take',
    logic(game) {
      if (game.player.at === this.at && inventory) {
        game.player.busy = true;
        inventory = null; game.player.hasProba = false;
        showEvent('–ú–∞—Ä–∏–Ω–∞: ‚Äú–ß—Ç–æ –Ω–µ—Å–µ—à—å? –≠—Ç–æ –ª–∏—à–Ω–µ–µ! –ù–∞, –≤—ã–±—Ä–æ—à—É!‚Äù ‚Äî –í—ã —Ç–µ—Ä—è–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç!', [
          {text: '–≠—Ö...', action:()=>{game.player.busy = false;}}
        ]);
      }
    }
  },
];

// UI ‚Äî –∫–∞—Ä—Ç–∞
function renderMap() {
  let html = '';
  for (let i = 0; i < ROOMS.length; ++i) {
    html += `<div class="room" id="room${i}">
      <b>${ROOMS[i].name}</b><br>
      <div>`;
    if (player.at === i) html += `<span class="actor">üßë‚Äçüíº (–≤—ã)</span>`;
    npcs.filter(n=>n.at===i).forEach(npc=>{
      html += `<span class="actor" title="${npc.name}">${npc.icon}</span>`;
    });
    html += `</div><div>`;
    if (!player.busy && player.at === i) {
      // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
      ROOMS[i].neighbors.forEach(j=>{
        html += `<button class="mapBtn" onclick="goTo(${j})">–í ${ROOMS[j].name}</button>`;
      });
      // –°–ø–µ—Ü –¥–µ–π—Å—Ç–≤–∏—è
      if (ROOMS[i].name === '–ê–∫–≤–∞—Ä–∏—É–º (—Ü–∏—Ñ—Ä–∞)' && !player.hasProba) {
        html += `<button class="mapBtn" onclick="makeProba()">–°–¥–µ–ª–∞—Ç—å —Ü–≤–µ—Ç–æ–ø—Ä–æ–±—É (—Å–∏–Ω–∏–π –ø—Ä–∏–Ω—Ç–µ—Ä)</button>`;
      }
    }
    html += `</div>`;
    html += `</div>`;
  }
  document.getElementById('map').innerHTML = html;
  document.getElementById('item').innerText = inventory ? inventory : '–ø—É—Å—Ç–æ';
  document.getElementById('stressBar').innerText = player.stress;
}

// –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è
window.goTo = function(idx) {
  player.at = idx;
  renderMap(); // –æ–±–Ω–æ–≤–∏—Ç—å UI
  checkEvents();
}

// –¶–≤–µ—Ç–æ–ø—Ä–æ–±–∞
window.makeProba = function() {
  inventory = '—Ü–≤–µ—Ç–æ–ø—Ä–æ–±–∞';
  player.hasProba = true;
  showEvent('–í—ã —Å–¥–µ–ª–∞–ª–∏ –ª–∏—Å—Ç —Ü–≤–µ—Ç–æ–ø—Ä–æ–±—ã –∏ –≤–∑—è–ª–∏ –µ–≥–æ –≤ —Ä—É–∫–∏!', [{text:'–û–∫', action:()=>{renderMap();}}]);
};

function showEvent(text, opts) {
  player.busy = true;
  document.getElementById('eventBox').style.display = 'block';
  document.getElementById('eventText').innerHTML = text;
  let html = '';
  opts.forEach((o,i)=>{
    html += `<button onclick="eventAction(${i})">${o.text}</button> `;
  });
  document.getElementById('eventOptions').innerHTML = html;
  window._eventOpts = opts;
}

window.eventAction = function(idx) {
  document.getElementById('eventBox').style.display = 'none';
  window._eventOpts[idx].action();
  player.busy = false;
  renderMap();
};

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–±—ã—Ç–∏—è NPC
function checkEvents() {
  npcs.forEach(npc => npc.logic({ player }));
}

// –î–≤–∏–∂–µ–Ω–∏–µ NPC –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫, –∫—Ä–æ–º–µ —Å–ª–µ–¥—è—â–∏—Ö(–ö–∞—Ç—è)
setInterval(()=>{
  npcs.forEach(npc=>{
    if(npc.follow) return; // –Ω–µ –¥–≤–∏–≥–∞–µ–º –ö–∞—Ç—é, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏–ª–∏–ø–ª–∞
    let neighbors = ROOMS[npc.at].neighbors;
    npc.at = neighbors[Math.floor(Math.random()*neighbors.length)];
  });
  renderMap();
  checkEvents();
}, 2000);

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
renderMap();
checkEvents();
