// ============= –ö–ê–†–¢–ê –õ–û–ö–ê–¶–ò–ô =============
/**
 * Room ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏/–∫–æ–º–Ω–∞—Ç—ã
 * @typedef {Object} Room
 * @property {number} id          ‚Äî –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–Ω–∞—Ç—ã
 * @property {string} name        ‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
 * @property {string} icon        ‚Äî –≠–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
 * @property {number[]} doors     ‚Äî –°–ø–∏—Å–æ–∫ id —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–æ–º–Ω–∞—Ç (—Å–≤—è–∑–∏, –ø–µ—Ä–µ—Ö–æ–¥—ã)
 * @property {string} desc        ‚Äî –ö—Ä–∞—Ç–∫–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
 * @property {number} [limit]     ‚Äî –ú–∞–∫—Å–∏–º—É–º –ª—é–¥–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
 */

/** @type {Room[]} */
const ROOMS = [
  {id: 0, name:'–û—Ñ–∏—Å',           icon:'üè¢',  doors:[1,4],     desc:'–ó–¥–µ—Å—å —Ä–∞–±–æ—Ç–∞—é—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º –∏ –±—ã–≤–∞—é—Ç –¥–æ–ø–µ—á–∞—Ç–Ω–∏–∫–∏.',   limit: 15},
  {id: 1, name:'–ö–æ—Ä–∏–¥–æ—Ä',        icon:'üö™',  doors:[0,2,5],   desc:'–ó–¥–µ—Å—å –≤—Å–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –∏–∑ –æ—Ñ–∏—Å–∞ –≤ –∞–∫–≤–∞—Ä–∏—É–º.',                        limit: 5},
  {id: 2, name:'–°–∫–ª–∞–¥ 1 —ç—Ç',     icon:'üì¶',  doors:[1,3,6],   desc:'–ú–µ—Å—Ç–æ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ –∏ –ø–∞–ª–ª–µ—Ç.',                                limit: 3},
  {id: 3, name:'–ü–†. —Ü–µ—Ö –¥–≤–µ—Ä—å',  icon:'üöß',  doors:[2,7],     desc:'–ü—Ä–æ—Ö–æ–¥ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ.',                                       limit: 2},
  {id: 4, name:'–ê–∫–≤–∞—Ä–∏—É–º',       icon:'üñ®',  doors:[0,5,8],   desc:'–¶–∏—Ñ—Ä–æ–≤–∞—è –ø–µ—á–∞—Ç—å, —Ç—É—Ç —Ç–æ–ª–ø–∞ —Ü–∏—Ñ—Ä–æ–≤–∏–∫–æ–≤.',                        limit: 3},
  {id: 5, name:'–ö–æ—Ä–∏–¥–æ—Ä 2',      icon:'‚¨ÖÔ∏è',  doors:[1,4,6],   desc:'–ü—Ä–æ—Ö–æ–¥ –º–µ–∂–¥—É –∞–∫–≤–∞—Ä–∏—É–º–æ–º –∏ —Å–∫–ª–∞–¥–æ–º.',                            limit: 5},
  {id: 6, name:'–î–≤–µ—Ä—å –Ω–∞ 2 —ç—Ç',  icon:'‚¨ÜÔ∏è',  doors:[2,5,9],   desc:'–õ–µ—Å—Ç–Ω–∏—Ü–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π —ç—Ç–∞–∂.',                                      limit: 2},
  {id: 7, name:'–ü—Ä–æ—Ö–æ–¥ –≤ –ø—Ä–æ–∏–∑–≤.',icon:'üöß', doors:[3,6,10],  desc:'–í—Ö–æ–¥ –Ω–∞ –±–æ–ª—å—à–æ–π —Ü–µ—Ö.',                                          limit: 2},
  {id: 8, name:'–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',   icon:'üè≠',  doors:[4,9,11],  desc:'–®—É–º–Ω—ã–π –∑–∞–ª —Å –º–∞—à–∏–Ω–∞–º–∏, –∫–æ—Ä–æ–±–∫–∏, –ø–∞–∫–µ—Ç—ã, –ø–æ–ª–∫–∏.',                 limit: 5},
  {id: 9, name:'–õ–∞–∫',            icon:'üíß',  doors:[6,8,12],  desc:'–õ–∞–∫–∏—Ä–æ–≤–∫–∞, –ê–Ω—Ç–æ–Ω —á–∞—Å—Ç–µ–Ω—å–∫–æ —Ç—É—Ç.',                                limit: 2},
  {id:10, name:'–ü–∞–ª–ª–µ—Ç—ã',        icon:'ü™µ',  doors:[7,8,11],  desc:'–ó–∞–≤–∞–ª–µ–Ω–æ –∫–æ—Ä–æ–±–∫–∞–º–∏.',                                           limit: 3},
  {id:11, name:'–°–∫–ª–∞–¥ 2 —ç—Ç',     icon:'üì¶',  doors:[8,10],    desc:'–í—Å–µ –∑–∞–ø–∞—Å—ã –∏ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏.',                                      limit: 3},
  {id:12, name:'–ö–∞–±–∏–Ω–µ—Ç –±–æ—Å—Å–∞',  icon:'üëî',  doors:[9],       desc:'–û—Ñ–∏—Å –í–∏–∫—Ç–æ—Ä–∞. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –¥–µ–ª.',                 limit: 2}
];


// ============= NPCS =============  

// spawnDelay –∏ moveInterval –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (spawnDelay —Ä–∞–Ω–¥–æ–º–Ω–æ, moveInterval –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞!)  
// spawnDelay –≤ —Å–∞–º–æ–º –º–∞—Å—Å–∏–≤–µ –º–æ–∂–Ω–æ –Ω–µ –∑–∞–¥–∞–≤–∞—Ç—å  
/**
 * NPC ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 * @typedef {Object} NPC
 * @property {string} name           ‚Äî –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è)
 * @property {string} icon           ‚Äî –≠–º–æ–¥–∑–∏
 * @property {string} portrait       ‚Äî –ö–∞—Ä—Ç–∏–Ω–∫–∞
 * @property {string} desc           ‚Äî –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
 * @property {string} type           ‚Äî –ö–ª–∞—Å—Å/—Ç–∏–ø –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ("kvest", "barrier", ...)
 * @property {number[]} home         ‚Äî –°–ø–∏—Å–æ–∫ id –∫–æ–º–Ω–∞—Ç, –º–µ–∂–¥—É –∫–æ—Ç–æ—Ä—ã–º–∏ —Ö–æ–¥–∏—Ç NPC
 * @property {number} workplace      ‚Äî –ì–ª–∞–≤–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 * @property {number} spawn          ‚Äî –ì–¥–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è
 * @property {number} moveInterval   ‚Äî –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π (–º—Å)
 * @property {boolean} [follow]      ‚Äî –°–ª–µ–¥—É–µ—Ç –ª–∏ –∑–∞ –∏–≥—Ä–æ–∫–æ–º (–¥–ª—è –ª–æ–≥–∏–∫–∏)
 * @property {boolean} [said]        ‚Äî –ì–æ–≤–æ—Ä–∏–ª –ª–∏ —Å—é–∂–µ—Ç–Ω—É—é —Ñ—Ä–∞–∑—É (–¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤)
 * @property {string} [dialog1]      ‚Äî –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ñ—Ä–∞–∑—ã
 * @property {number} [prob1]        ‚Äî –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π —Ñ—Ä–∞–∑—ã (0-100)
 * @property {string} [dialog2]      ‚Äî –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ñ—Ä–∞–∑—ã
 * @property {number} [prob2]        ‚Äî –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—Ç–æ—Ä–æ–π —Ñ—Ä–∞–∑—ã
 * @property {string} [dialog3]      ‚Äî –¢—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Ñ—Ä–∞–∑—ã
 * @property {number} [prob3]        ‚Äî –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç—Ä–µ—Ç—å–µ–π —Ñ—Ä–∞–∑—ã
 * @property {number} [patrolInterval] ‚Äî –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±—Ö–æ–¥–∞–º–∏ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
 */

/** @type {NPC[]} */
const NPCS_FULL = [
  {
    name: '–ö–∞—Ç—è', icon: 'üë©',
    portrait: 'img/katya.jpg',
    desc: '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä. –í—Å–µ–≥–¥–∞ –ø—Ä–æ—Å–∏—Ç —Å–¥–µ–ª–∞—Ç—å —Ü–≤–µ—Ç–æ–ø—Ä–æ–±—É.',
    type: 'kvest',
    home: [0, 1],
    workplace: 1,
    spawn: 0,
    moveInterval: 9000,
    follow: false,
    dialog1: "–ö–∞—Ç—è: –ê—É, –Ω—É —Å–¥–µ–ª–∞–π —Ü–≤–µ—Ç–æ–ø—Ä–æ–±—É.", prob1: 60,
    dialog2: "–ö–∞—Ç—è: –¢—ã —á—Ç–æ –∑–∞–±—ã–ª –ø—Ä–æ —Ü–≤–µ—Ç–æ–ø—Ä–æ–±—É?", prob2: 30,
    dialog3: "–ö–∞—Ç—è: –ê—É, –±–æ–π - —à–∞—Ä—å—Å—è –±–µ–∑ —á–∏–ª–∞ –Ω–∞ —Ü–∏—Ñ—Ä—è–∫ –∏ —à–µ–∫–∞–π –º–Ω–µ —Ü–≤–µ—Ç–∫—É –ø–æ —Ñ–∞—Å—Ç—É!!!", prob3: 10
  },
  {
    name: '–°–≤–µ—Ç–ª–∞–Ω–∞', icon: 'üë©üèº‚Äçü¶±',
    portrait: 'img/svetlana.jpg',
    desc: '–í–∑—Ä–æ—Å–ª–∞—è –±–æ–ª—Ç—É—à–∫–∞, –ª—é–±–∏—Ç –∑–∞–¥–µ—Ä–∂–∞—Ç—å —É –¥–≤–µ—Ä–∏ –¥–ª–∏–Ω–Ω—ã–º —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–º.',
    type: 'barrier',
    home: [0, 1],
    workplace: 0,
    spawn: 0,
    moveInterval: 6000,
    said: false,
    dialog1: "–°–≤–µ—Ç–ª–∞–Ω–∞: –ü–æ—á–µ–º—É –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –º–æ–∏ —Ñ–∞–π–ª—ã! –ü—Ä–æ—Å—Ç–æ —Ç—ã –¥–æ–ª–∂–µ–Ω —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!", prob1: 60,
    dialog2: "–°–≤–µ—Ç–ª–∞–Ω–∞: –ù—É –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–µ –Ω–∞–π—Ç–∏ –º–æ–π —Ñ–∞–π–ª...", prob2: 30,
    dialog3: "–°–≤–µ—Ç–ª–∞–Ω–∞: –ê –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, –º–æ—è —Å–æ—Å–µ–¥–∫–∞ –≤—è–∑–∞—Ç—å –Ω–∞—á–∞–ª–∞...", prob3: 10
  },
  {
    name: '–í–ª–∞–¥–∏–º–∏—Ä', icon: 'üë∂',
    portrait: 'img/vladimir.jpg',
    desc: '–ù–æ–≤—ã–π, –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è, —á—Ç–æ —Ç—É—Ç –¥–µ–ª–∞—é—Ç.',
    type: 'neutral',
    home: [0, 1, 2],
    workplace: 2,
    spawn: 0,
    moveInterval: 18000,
    dialog1: "–í–ª–∞–¥–∏–º–∏—Ä: –Ø —Ç–∞–∫ –ø–æ–Ω–∏–º–∞—é, –º—ã –≤ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∏?", prob1: 60,
    dialog2: "–í–ª–∞–¥–∏–º–∏—Ä: –Ø —Ö–æ—Ç–µ–ª –±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –º—ã –¥–µ–ª–∞–µ–º —ç—Ç–æ –≤—Å—ë?", prob2: 30,
    dialog3: "–í–ª–∞–¥–∏–º–∏—Ä: –ê –¥–æ–∑–∞–ª–∏–≤–∫–∏ –∫—É–¥–∞, –ø–æ —Å–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –∑–∞–ª–∏–≤–∞—Ç—å?", prob3: 10
  },
  {
    name: '–°–µ—Ä–≥–µ–π –ê—Å', icon: 'üßì',
    portrait: 'img/sergey.jpg',
    desc: '–°—Ç–∞—Ä—à–∏–π –¥–æ–ø–µ—á–∞—Ç–Ω–∏–∫, –≤–æ—Ä—á–∏—Ç –ø–æ –¥–µ–ª—É –æ –º–∞–∫–µ—Ç–∞—Ö –∏ –º–µ—Ç–∫–∞—Ö.',
    type: 'tip',
    home: [2, 1],
    workplace: 2,
    spawn: 0,
    moveInterval: 36000,
    said: false,
    dialog1: "–°–µ—Ä–≥–µ–π –ê—Å: –£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤, —Å–ø–µ–∫—Ç—Ä–æ—Ñ–æ—Ç–æ–º–µ—Ç—Ä–∏—è, —Ç—Ä–∏–ø–ª–∏–∫–∞—Ç, –∫–æ–ª–æ—Ä–∏–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞, —Ñ–ª–∞–ø–ø–∏–Ω–≥, –∏–Ω—Å–ø–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–≥–æ–Ω.", prob1: 60,
    dialog2: "–°–µ—Ä–≥–µ–π –ê—Å: –ü–µ—Ä—Ü–µ–ø—Ü–∏–æ–Ω–Ω—ã–π —Ä–∏–ø, –∏–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω, —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–∞, —Ç—Ä–µ–ø–ø–∏–Ω–≥, –º–∏–∫—Ä–æ—Ä–∞—Å—Ç—Ä–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –¥–µ–Ω—Å–∏—Ç–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å, —Ä–∞—Å—Ç—Ä–æ–≤—ã–π –∫–ª–∏—Ä–∏–Ω–≥, —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è.", prob2: 30,
    dialog3: "–°–µ—Ä–≥–µ–π –ê—Å: –ì—Ä–∞–¥—É–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—Ä–Ω–∏–Ω–≥–∞, —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —ç–∫—Å–ø—Ä–µ—à–µ–Ω—ã –∏–º–ø–æ–∑–∏—Ü–∏–∏, –∞–≤—Ç–æ—Ñ–ª–æ—É –≤–µ—Ä—Å—Ç–∫–∏, —Å–æ—Ä—Å–∏–Ω–≥ –æ—Ç —à—Ä–∏—Ñ—Ç–æ–≤–æ–≥–æ –ø—É–ª–∞, –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–ø—É—Å–∫ –ø–æ–ª–æ—Å, —ç–º–±–µ–¥–¥–∏–Ω–≥ –≥–ª–∏—Ñ–æ–≤, –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏—è –ª–∏–¥–∏–Ω–≥–∞, –∫–æ–Ω—Ç—Ä–æ–ª—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π.", prob3: 10
  },
  {
    name: '–°–∞—à–∞ –•–∞', icon: 'ü§µ',
    portrait: 'img/sasha.jpg',
    desc: '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –¥–æ–ø–µ—á–∞—Ç–Ω–∏–∫, —Å–Ω–∏–∂–∞–µ—Ç —Å—Ç—Ä–µ—Å—Å.',
    type: 'happy',
    home: [2, 1, 4],
    workplace: 2,
    spawn: 0,
    moveInterval: 30000,
    dialog1: "–°–∞—à–∞ –•–∞: –î–∞–≤–∞–π –∫—É–ª–∞–∫.", prob1: 60,
    dialog2: "–°–∞—à–∞ –•–∞: –ê –∫—Ç–æ –≤–æ–∑—å–º—ë—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–æ—á–∫—É —Ç–∫?", prob2: 30,
    dialog3: "–°–∞—à–∞ –•–∞: –Ø –≥–æ–≤–æ—Ä–∏–ª –≤–∞–º —Ä–∞–Ω—å—à–µ –ø—Ä–æ CorelDRAW...", prob3: 10
  },
  {
    name: '–ú–∞—Ä–∏–Ω–∞', icon: 'üë©‚Äçüî¨',
    portrait: 'img/marina.jpg',
    desc: '–ì–ª–∞–≤–Ω–∞—è –ø–æ —Ü–∏—Ñ—Ä–µ.',
    type: 'take',
    home: [4, 5],
    workplace: 4,
    spawn: 0,
    moveInterval: 12000,
    dialog1: "–ú–∞—Ä–∏–Ω–∞: –¢—ã —á—Ç–æ –µ—â—ë —Ç—É—Ç? –ü—à—ë–ª –æ—Ç—Å—é–¥–∞, —É –º–µ–Ω—è —Ä–∞–±–æ—Ç–∞!", prob1: 60,
    dialog2: "–ú–∞—Ä–∏–Ω–∞: –ú–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –æ—à–∏–±–∫–∏?", prob2: 30,
    dialog3: "–ú–∞—Ä–∏–Ω–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π –≤ –¥–≤–∞ —Ü–≤–µ—Ç–∞ –∏ –±—ã—Å—Ç—Ä–æ.", prob3: 10
  },
  {
    name: '–ê—Ä—Å–µ–Ω–∏–π', icon: 'üßë',
    portrait: 'img/arseniy.jpg',
    desc: '–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ü–∏—Ñ—Ä–µ, –∏–Ω–æ–≥–¥–∞ —á—Ç–æ-—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç.',
    type: 'help',
    home: [4, 5],
    workplace: 4,
    spawn: 0,
    moveInterval: 12000,
    dialog1: "–ê—Ä—Å–µ–Ω–∏–π: –î–∞–≤–∞–π —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —ç—Ç–∏–º.", prob1: 60,
    dialog2: "–ê—Ä—Å–µ–Ω–∏–π: –í–æ—Ç —Ç–∞–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å.", prob2: 30,
    dialog3: "–ê—Ä—Å–µ–Ω–∏–π: –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–≤–µ—Ç–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.", prob3: 10
  },
  {
    name: '–í–∏–∫—Ç–æ—Ä', icon: 'ü¶í',
    portrait: 'img/viktor.jpg',
    desc: '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –±–æ—Å—Å. –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç, –µ—Å–ª–∏ –Ω–µ –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.',
    type: 'boss',
    home: [0,1,2,3,4,5,6,7,8,9,10,11,12],
    workplace: 12,
    spawn: 0,
    moveInterval: 5000,
    patrolInterval: 60000
  }
];



// ============= –ö–í–ï–°–¢–´ =============

/**
 * Quest ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è (–∫–≤–µ—Å—Ç–∞)
 * @typedef {Object} Quest
 * @property {string} name ‚Äî –ö—Ä–∞—Ç–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
 * @property {string} id   ‚Äî –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID (–∫–ª—é—á –ª–æ–≥–∏–∫–∏)
 * @property {string} desc ‚Äî –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */

/** @type {Quest[]} */
const QUESTS = [
  { name: '–¶–≤–µ—Ç–æ–ø—Ä–æ–±–∞', id: 'proba', desc: '–°–¥–µ–ª–∞—Ç—å —Ü–≤–µ—Ç–æ–ø—Ä–æ–±—É –¥–ª—è –ö–∞—Ç–∏' },
  { name: '–õ–∞–∫', id: 'lak', desc: '–û—Ç–ª–∞–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤—Ç–æ—Ä–æ–º —ç—Ç–∞–∂–µ' },
  { name: '–§–∏–Ω–∞–ª', id: 'boss', desc: '–î–æ–π—Ç–∏ –∫ –±–æ—Å—Å—É, –ø—Ä–æ–π—Ç–∏ –±–ª–∏—Ü –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å' }
];

// –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞
/** @typedef {'inprogress' | 'done' | false} QuestState */

// ============= –°–û–°–¢–û–Ø–ù–ò–ï =============

/**
 * Player ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞
 * @typedef {Object} Player
 * @property {string} name ‚Äî –ò–º—è –∏–≥—Ä–æ–∫–∞
 * @property {number} at ‚Äî –¢–µ–∫—É—â–∏–π ID –∫–æ–º–Ω–∞—Ç—ã
 * @property {number} stress ‚Äî –°—Ç—Ä–µ—Å—Å (0‚Äì100)
 * @property {string[]} inventory ‚Äî –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
 * @property {boolean} busy ‚Äî –§–ª–∞–≥: –∑–∞–Ω—è—Ç (–∞–Ω–∏–º–∞—Ü–∏–∏, –¥–∏–∞–ª–æ–≥–∏ –∏ —Ç.–ø.)
 * @property {{[questId:string]: QuestState}} quests ‚Äî –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤
 * @property {boolean} end ‚Äî –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞
 */

/**
 * GameState ‚Äî –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ–π –∏–≥—Ä—ã
 * @typedef {Object} GameState
 * @property {Player} player
 * @property {NPC[]} npcs
 * @property {boolean} dialogOpen ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
 */

/** @type {GameState} */
const gameState = {
  player: {
    name: '–ù–æ–≤–∏—á–æ–∫',
    at: 0,
    stress: 0,
    inventory: [],
    busy: false,
    quests: {
      proba: false,
      lak: false,
      boss: false
    },
    end: false
  },
  npcs: [],
  dialogOpen: false
};


// ==== –£–¢–ò–õ–ò–¢–´ ====

/**
 * –ì–ª—É–±–æ–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞/–º–∞—Å—Å–∏–≤–∞ (—Ç–æ–ª—å–∫–æ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π).
 * ‚ö†Ô∏è –ù–µ –∫–æ–ø–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏, Map, Set –∏ —Ç.–ø.
 * @param {any} o - –æ–±—ä–µ–∫—Ç –∏–ª–∏ –º–∞—Å—Å–∏–≤
 * @returns {any} - –≥–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è
 */
function deepClone(o) {
  return JSON.parse(JSON.stringify(o));
}

/**
 * –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É NPC —Å —É—á—ë—Ç–æ–º –≤–µ—Å–æ–≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π.
 * –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã prob2/prob3, –±–µ—Ä—ë—Ç dialog1.
 * @param {NPC} npc
 * @returns {string}
 */
function randDialog(npc) {
  const rnd = Math.random() * 100;

  const p3 = typeof npc.prob3 === "number" ? npc.prob3 : 0;
  const p2 = typeof npc.prob2 === "number" ? npc.prob2 : 0;
  const p1 = typeof npc.prob1 === "number" ? npc.prob1 : 100 - p2 - p3;

  if (rnd < p3 && npc.dialog3) return npc.dialog3;
  if (rnd < p3 + p2 && npc.dialog2) return npc.dialog2;
  return npc.dialog1 || "";
}

/**
 * –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π, –Ω–µ –∏–∑–º–µ–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª).
 * @template T
 * @param {T[]} array
 * @returns {T[]} - –Ω–æ–≤—ã–π –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
 */
function shuffle(array) {
  const arr = array.slice(); // –∫–æ–ø–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
  return arr;
}


// ============= –°–ü–ê–í–ù –ò –î–í–ò–ñ–ï–ù–ò–ï NPC =============

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä—ã –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö NPC (—Ä–∞–∑–±—Ä–æ—Å –ø–æ spawnDelay).
 * –ü–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π NPC –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è, –µ—Å–ª–∏ –∏–º–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–æ–Ω.
 * –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –í–∏–∫—Ç–æ—Ä–∞ ‚Äî –ø–∞—Ç—Ä—É–ª—å –ø–æ –º–∞—Ä—à—Ä—É—Ç—É.
 */
function startAllNpcSpawns() {
  gameState.npcs.forEach(npc => {
    setTimeout(() => {
      npc._spawned = true;
      npc.at = typeof npc.spawn === "number" ? npc.spawn : 0;
      renderAll();

      // –õ–æ–≥–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è:
      if (npc.name === "–í–∏–∫—Ç–æ—Ä") {
        startViktorLogic(npc); // –í–∏–∫—Ç–æ—Ä ‚Äî –æ—Å–æ–±—ã–π –ø–∞—Ç—Ä—É–ª—å
      } else if (Array.isArray(npc.home) && npc.home.length > 1) {
        startNpcMovement(npc); // –û–±—ã—á–Ω—ã–π NPC —Å –º–∞—Ä—à—Ä—É—Ç–æ–º
      }

    }, npc.spawnDelay);
  });
}

/**
 * –ü–∞—Ç—Ä—É–ª—å –í–∏–∫—Ç–æ—Ä–∞: –¥–≤–∏–∂–µ—Ç—Å—è –ø–æ –≤—Å–µ–º—É –º–∞—Ä—à—Ä—É—Ç—É —Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ.
 * –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å –ø–∞—É–∑–∞–º–∏.
 */
function startViktorLogic(npc) {
  let forward = true;

  // –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥: –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
  const initialRoute = npc.home.slice(); // –ü—Ä—è–º–æ–π –ø—É—Ç—å
  movePatrol(npc, initialRoute, () => {
    // –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–∞—Ç—Ä—É–ª—å
    setTimeout(function patrolLoop() {
      // –ü–∞—Ç—Ä—É–ª–∏—Ä—É–µ–º —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ
      const route = forward ? npc.home.slice().reverse() : npc.home.slice();
      forward = !forward;

      movePatrol(npc, route, () => {
        setTimeout(patrolLoop, npc.patrolInterval || 60000); // –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
      });
    }, npc.patrolInterval || 60000);
  });
}

/**
 * –ü–æ—à–∞–≥–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É `route[]`, –ø–æ 6 —Å–µ–∫ –Ω–∞ –∫–æ–º–Ω–∞—Ç—É.
 * –í—ã–∑—ã–≤–∞–µ—Ç `done()` –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞.
 * @param {NPC} npc 
 * @param {number[]} route ‚Äî —Å–ø–∏—Å–æ–∫ id –∫–æ–º–Ω–∞—Ç
 * @param {function} done ‚Äî callback –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ö–æ–¥–∞
 */
function movePatrol(npc, route, done) {
  if (!route.length) return done(); // –º–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à—ë–Ω
  npc.at = route.shift();           // –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–Ω–∞—Ç—É
  renderAll();                      // –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É

  setTimeout(() => movePatrol(npc, route, done), 6000); // —à–∞–≥ —á–µ—Ä–µ–∑ 6 —Å–µ–∫
}

/**
 * –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ NPC –ø–æ –µ–≥–æ home-–º–∞—Ä—à—Ä—É—Ç—É.
 * –†–µ–∞–ª–∏–∑—É–µ—Ç:
 *  1. –û—Å–æ–±–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –ú–∞—Ä–∏–Ω—ã –∏ –∞–∫–≤–∞—Ä–∏—É–º–∞ (–¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–º).
 *  2. "–¢—É–Ω–Ω–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ" –ø—Ä–∏ –∑–∞—Ç–æ—Ä–∞—Ö: NPC –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –µ—Å–ª–∏ –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –∑–∞–Ω—è—Ç—ã, –∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—ã–µ –¥–∞–ª—å—à–µ.
 * @param {NPC} npc - –û–±—ä–µ–∫—Ç NPC, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –¥–≤–∏–≥–∞—Ç—å—Å—è
 */
function startNpcMovement(npc) {
  if (npc._moveTimer) clearInterval(npc._moveTimer);

  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π (–º—Å): –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç 15 —Å–µ–∫.
  const interval = typeof npc.moveInterval === "number" ? npc.moveInterval : 15000;

  npc._moveTimer = setInterval(() => {
    if (!npc._spawned) return; // –ù–µ –¥–≤–∏–≥–∞–µ–º –¥–æ —Å–ø–∞–≤–Ω–∞
    if (npc.name === "–ú–∞—Ä–∏–Ω–∞") return; // –ú–∞—Ä–∏–Ω—É –¥–≤–∏–≥–∞–µ—Ç –æ—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞

    const currAt = npc.at;
    // –í—Å–µ –ª–æ–∫–∞—Ü–∏–∏, –∫—É–¥–∞ NPC –º–æ–∂–µ—Ç —Ö–æ–¥–∏—Ç—å (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π)
    const possible = npc.home.filter(idx => idx !== currAt);
    if (!possible.length) return; // –í–æ–æ–±—â–µ –Ω–µ–∫—É–¥–∞ –∏–¥—Ç–∏

    // --- –ê–ö–í–ê–†–ò–£–ú & –ú–ê–†–ò–ù–ê: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ø–µ—Ü. –ø—Ä–∞–≤–∏–ª—É ---
    const AQUARIUM_ID = ROOMS.find(r => r.name === '–ê–∫–≤–∞—Ä–∏—É–º')?.id;
    // –ö—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å –ú–∞—Ä–∏–Ω–æ–π –≤ –∞–∫–≤–∞—Ä–∏—É–º–µ
    const allowedWithMarina = ['–°–∞—à–∞', '–ö–∏—Ä', '–í–∏–∫—Ç–æ—Ä', '–ê—Ä—Å–µ–Ω–∏–π', gameState.player.name];

    // 1. C–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    const openRooms = possible.filter(roomId => {
      // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ª–∏–º–∏—Ç–∞–º
      const occupants = gameState.npcs.filter(n => n._spawned && n.at === roomId).length;
      const roomLimit = ROOMS[roomId].limit || 3;

      // –°–ø–µ—Ü. –ø—Ä–∞–≤–∏–ª–æ: –∞–∫–≤–∞—Ä–∏—É–º —Å –ú–∞—Ä–∏–Ω–æ–π
      if (roomId === AQUARIUM_ID) {
        const marinaInAquarium = gameState.npcs.find(n => n.name === '–ú–∞—Ä–∏–Ω–∞' && n._spawned && n.at === AQUARIUM_ID);
        // –ï—Å–ª–∏ –≤ –∞–∫–≤–∞—Ä–∏—É–º–µ –ú–∞—Ä–∏–Ω–∞ –∏ —ç—Ç–æ—Ç NPC –Ω–µ –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö ‚Äî –Ω–µ–ª—å–∑—è –∏–¥—Ç–∏
        if (marinaInAquarium && !allowedWithMarina.includes(npc.name)) return false;
      }

      // –ï—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ‚Äî —Å—á–∏—Ç–∞–µ—Ç—Å—è "—Å–≤–æ–±–æ–¥–Ω–æ–π"
      return occupants < roomLimit;
    });

    if (openRooms.length) {
      // –ï—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–¥—ë–º!
      const next = openRooms[Math.floor(Math.random() * openRooms.length)];
      npc.at = next;
      renderAll();
      return;
    }

    // 2. –ó–∞—Ç–æ—Ä: –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª–Ω—ã. "–¢—É–Ω–Ω–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"!
    // –í—ã–±–∏—Ä–∞–µ–º –ª—é–±—É—é —Å–æ—Å–µ–¥–Ω—é—é –∫–æ–º–Ω–∞—Ç—É, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π (–Ω–æ —Å —É—á—ë—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∞–∫–≤–∞—Ä–∏—É–º–∞)
    let tunnelRooms = possible;

    // –°–ø–µ—Ü. –ø—Ä–∞–≤–∏–ª–æ: –∞–∫–≤–∞—Ä–∏—É–º —Å –ú–∞—Ä–∏–Ω–æ–π ‚Äî –¥–∞–∂–µ —Ç—É–Ω–Ω–µ–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è!
    tunnelRooms = tunnelRooms.filter(roomId => {
      if (roomId === AQUARIUM_ID) {
        const marinaInAquarium = gameState.npcs.find(n => n.name === '–ú–∞—Ä–∏–Ω–∞' && n._spawned && n.at === AQUARIUM_ID);
        if (marinaInAquarium && !allowedWithMarina.includes(npc.name)) return false;
      }
      return true;
    });

    if (!tunnelRooms.length) return; // –í—Å–µ —Å–æ—Å–µ–¥–∏ –ø–æ–¥ –∑–∞–ø—Ä–µ—Ç–æ–º (–æ—Ç –ú–∞—Ä–∏–Ω–∏!)

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç—É–Ω–Ω–µ–ª—å
    const tunnel = tunnelRooms[Math.floor(Math.random() * tunnelRooms.length)];
    npc.at = tunnel;

    // –ü—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É –ø—Ä–æ–π—Ç–∏ –∏–∑ —Ç—É–Ω–Ω–µ–ª—å–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –≤ –ª—é–±—É—é —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—É—é (–∫—Ä–æ–º–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–∫–∏–Ω—É—Ç–æ–π)
    const tunnel_exits = npc.home.filter(idx => idx !== tunnel);
    // –û–ø—è—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –∞–∫–≤–∞—Ä–∏—É–º—É (–¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ—Å–ª–µ —Ç—É–Ω–Ω–µ–ª—è —Ç—É–¥–∞ –Ω–µ–ª—å–∑—è!)
    const nextAfterTunnel = tunnel_exits.find(roomId => {
      if (roomId === AQUARIUM_ID) {
        const marinaInAquarium = gameState.npcs.find(n => n.name === '–ú–∞—Ä–∏–Ω–∞' && n._spawned && n.at === AQUARIUM_ID);
        if (marinaInAquarium && !allowedWithMarina.includes(npc.name)) return false;
      }
      return true;
    });
    if (nextAfterTunnel !== undefined) npc.at = nextAfterTunnel;

    renderAll();

  }, interval);
}

// ========== –°–¢–ê–†–¢ –ò –°–ë–†–û–° ==========

/**
 * –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.
 * @param {string} name ‚Äî –ò–º—è –∏–≥—Ä–æ–∫–∞
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∏ NPC.
 */
function startGame(name) {
  gameState.player = {
    name: name.trim().length ? name : '–ù–æ–≤–∏—á–æ–∫',
    at: 0,
    stress: 0,
    inventory: [],
    busy: false,
    quests: { proba: false, lak: false, boss: false },
    end: false
  };

  gameState.npcs = deepClone(NPCS_FULL).map(npc => ({
    ...npc,
    spawnDelay: 10000 + Math.floor(Math.random() * 10001),
    _moveTimer: null,
    _spawned: false,
    at: typeof npc.spawn === "number" ? npc.spawn : 0
  }));

  renderAll();
  startAllNpcSpawns();
}

/**
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–≥—Ä—É –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞.
 */
function resetGame() {
  const n = prompt("–í–∞—à–µ –∏–º—è?", "–ù–æ–≤–∏—á–æ–∫")?.trim() || "–ù–æ–≤–∏—á–æ–∫";
  document.getElementById('player-name').innerText = n;
  startGame(n);
}

// ========== –†–ï–ù–î–ï–†–ò–ù–ì ==========

function renderAll() {
  renderMap();
  renderQuests();
  renderFooter();
}

function renderMap() {
  let html = '';
  for (let i = 0; i < ROOMS.length; ++i) {
    const active = gameState.player.at === i ? 'active' : '';
    const longClass = ROOMS[i].name.length > 14 ? 'long' : '';
    html += `<div class="room ${active}" title="${ROOMS[i].desc}">`;
    html += `<div class="room-title ${longClass}">${ROOMS[i].icon} ${ROOMS[i].name}</div>`;
    html += `<div class="actors">`;
    if (gameState.player.at === i) {
      const plNameClass = gameState.player.name.length > 11 ? 'long' : '';
      html += `<span class="actor actor-ego" title="–≠—Ç–æ –≤—ã!">üßë‚Äçüíº<span class="actor-name ${plNameClass}">${gameState.player.name}</span></span>`;
    }
    gameState.npcs.filter(n => n._spawned && n.at === i).forEach(npc => {
      const npcNameClass = npc.name.length > 11 ? 'long' : '';
      html += `<span class="actor actor-npc" title="${npc.desc}">${npc.icon}<span class="actor-name ${npcNameClass}">${npc.name}</span></span>`;
    });
    html += `</div><div class="doors">–î–≤–µ—Ä–∏: ${ROOMS[i].doors.map(j => ROOMS[j].name).join(', ')}</div></div>`;
  }
  document.getElementById('map').innerHTML = html;
}

function renderQuests() {
  const q = QUESTS.map(qk => `<li>${qk.name}: <b>${
    gameState.player.quests[qk.id] === 'done' ? '‚úÖ' :
    (gameState.player.quests[qk.id] ? 'üïì' : '‚ùå')
  }</b> ‚Äî <span class='actor-desc'>${qk.desc}</span></li>`).join('');
  document.getElementById('questlog').innerHTML = `<ul>${q}</ul>`;
}

function renderFooter() {
  const stress = gameState.player.stress;
  const inventory = gameState.player.inventory.length
    ? gameState.player.inventory.join(', ')
    : '–ø—É—Å—Ç–æ';

  let controls = '';
  const here = gameState.player.at;
  const doors = ROOMS[here].doors;

  doors.forEach(idx => {
    const npcsHere = gameState.npcs.filter(n => n._spawned && n.at === idx).length;
    const roomLimit = ROOMS[idx].limit || 3;
    if (npcsHere + 1 > roomLimit) {
      controls += `<button class="moveBtn" disabled style="opacity:.5;cursor:not-allowed;">–í ${ROOMS[idx].name} ${ROOMS[idx].icon} (–ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–æ)</button>`;
    } else {
      controls += `<button class="moveBtn" onclick="moveTo(${idx})">–í ${ROOMS[idx].name} ${ROOMS[idx].icon}</button>`;
    }
  });

  if (
    ROOMS[here].name === '–ê–∫–≤–∞—Ä–∏—É–º' &&
    !gameState.player.inventory.includes('—Ü–≤–µ—Ç–æ–ø—Ä–æ–±–∞') &&
    gameState.player.quests.proba === 'inprogress'
  ) {
    controls += `<button class="actionBtn" onclick="makeProba()">–°–¥–µ–ª–∞—Ç—å —Ü–≤–µ—Ç–æ–ø—Ä–æ–±—É</button>`;
  }
  if (
    ROOMS[here].name === '–õ–∞–∫' &&
    !gameState.player.inventory.includes('–ª–∞–∫') &&
    gameState.player.quests.proba === 'done'
  ) {
    controls += `<button class="actionBtn" onclick="makeLak()">–°–¥–µ–ª–∞—Ç—å –ª–∞–∫</button>`;
  }

  const quests = QUESTS.map(qk =>
    `${qk.name}:${gameState.player.quests[qk.id] === 'done' ? '‚úÖ'
    : (gameState.player.quests[qk.id] ? 'üïì' : '‚ùå')}`
  ).join(' | ');

  const html = `
    –°—Ç—Ä–µ—Å—Å: ${stress} / 100
    &nbsp;|&nbsp;
    –í —Ä—É–∫–∞—Ö: ${inventory}
    &nbsp;|&nbsp;
    <button onclick="resetGame()">–ó–∞–Ω–æ–≤–æ</button>
    <br>
    ${controls}
    <br>
    <span style="color:#3c5992; font-size:.92em">–ö–≤–µ—Å—Ç—ã: ${quests}</span>
  `;

  document.getElementById('footer').innerHTML = html;
}


// -------------- –ü–†–û–ß–ò–ï –§–£–ù–ö–¶–ò–ò –ò –õ–û–ì–ò–ö–ê -----------  

/**
 * –ú–∞—Ä–∏–Ω–∞ —Å–∏–ª–æ–π –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É roomIdx:
 * –∫–∞–∂–¥—ã–π –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π NPC "—Ç—É–Ω–Ω–µ–ª–∏—Ä—É–µ—Ç" –¥–æ –ø–µ—Ä–≤–æ–π —Å–≤–æ–±–æ–¥–Ω–æ–π —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –∏–∑ —Å–≤–æ–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞,
 * –µ—Å–ª–∏ –Ω–µ –Ω–∞—à—ë–ª ‚Äî —É—Ö–æ–¥–∏—Ç –≤ –û—Ñ–∏—Å (–µ—Å–ª–∏ –æ–Ω –≤ –µ–≥–æ home).
 * @param {number} roomIdx ‚Äî –∏–Ω–¥–µ–∫—Å –∫–æ–º–Ω–∞—Ç—ã, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –≤—ã–≥–Ω–∞—Ç—å NPC
 */
function kickNpcsFromRoom(roomIdx) {
  const AQUARIUM_ID = ROOMS.find(r => r.name === '–ê–∫–≤–∞—Ä–∏—É–º')?.id;
  const OFFICE_ID    = ROOMS.find(r => r.name === '–û—Ñ–∏—Å')?.id;      // "–û—Ñ–∏—Å" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ ROOMS
  const allowedWithMarina = ['–°–∞—à–∞', '–ö–∏—Ä', '–í–∏–∫—Ç–æ—Ä', '–ê—Ä—Å–µ–Ω–∏–π', gameState.player.name];

  gameState.npcs.forEach(npc => {
    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏: –∂–∏–≤–æ–π, –≤ –∫–æ–º–Ω–∞—Ç–µ, –Ω–µ –ú–∞—Ä–∏–Ω–∞, –ù–ï "—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π" –≤ –ê–∫–≤–∞—Ä–∏—É–º–µ
    if (
      npc._spawned &&
      npc.at === roomIdx &&
      npc.name !== '–ú–∞—Ä–∏–Ω–∞' &&
      !(
        roomIdx === AQUARIUM_ID &&
        allowedWithMarina.includes(npc.name)
      )
    ) {
      // 1. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—É—é —Å–≤–æ–±–æ–¥–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –≤ –º–∞—Ä—à—Ä—É—Ç–µ (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π, –±–µ–∑ –ú–∞—Ä–∏–Ω—ã, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–≤ –ª–∏–º–∏—Ç)
      let freeHome = npc.home.find(idx =>
        idx !== roomIdx &&
        gameState.npcs.filter(n => n._spawned && n.at === idx && n.name !== '–ú–∞—Ä–∏–Ω–∞').length < (ROOMS[idx].limit || 3) &&
        !gameState.npcs.some(n => n._spawned && n.at === idx && n.name === '–ú–∞—Ä–∏–Ω–∞')
      );
      // 2. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî "—Ç—É–Ω–Ω–µ–ª–∏—Ä—É–µ–º": –∏–¥—ë–º –≤ –ª—é–±—É—é —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É home (—á–µ—Ä–µ–∑ –ª—é–±—É—é –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é), –∞ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—É—é ‚Äî –≤ –æ—Ñ–∏—Å
      if(freeHome === undefined) {
        // –ï—Å–ª–∏ –æ—Ñ–∏—Å –µ—Å—Ç—å —Å—Ä–µ–¥–∏ home ‚Äî –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ç—É–¥–∞
        if (npc.home.includes(OFFICE_ID)) {
          npc.at = OFFICE_ID;
        } else {
          // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –≤ –ª—é–±—É—é –∫–æ–º–Ω–∞—Ç—É –∏–∑ home
          npc.at = npc.home.find(idx => idx !== roomIdx) ?? roomIdx;
        }
      } else {
        npc.at = freeHome;
      }
      // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—É—é "–ø—Ä–æ—Ç–µ—á–∫—É", –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–π —Ç—É–Ω–Ω–µ–ª—å ‚Äî –ø–æ–∫–∞ –Ω–µ –æ–∫–∞–∂–µ—Ç—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π)
    }
  });
}



// --------- –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –ò–ì–†–û–ö–ê ----------
/**
 * –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É –∫–æ–º–Ω–∞—Ç—ã (idx).
 * –£—á–∏—Ç—ã–≤–∞–µ—Ç –ª–∏–º–∏—Ç –∫–æ–º–Ω–∞—Ç—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞ —Å –ú–∞—Ä–∏–Ω–æ–π).
 * @param {number} idx ‚Äî –∏–Ω–¥–µ–∫—Å –∫–æ–º–Ω–∞—Ç—ã
 */
function moveTo(idx) {
  const npcsHere = gameState.npcs.filter(n => n._spawned && n.at === idx).length;
  const roomLimit = ROOMS[idx].limit || 3;

  // –û—Å–æ–±–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –≤ –ê–∫–≤–∞—Ä–∏—É–º —Å –ú–∞—Ä–∏–Ω–æ–π –º–æ–∂–µ—Ç –ø–æ–ø–∞—Å—Ç—å –Ω–µ –∫–∞–∂–¥—ã–π
  const AQUARIUM_ID = ROOMS.find(r => r.name === '–ê–∫–≤–∞—Ä–∏—É–º')?.id;
  const allowedWithMarina = ['–°–∞—à–∞', '–ö–∏—Ä', '–í–∏–∫—Ç–æ—Ä', '–ê—Ä—Å–µ–Ω–∏–π', gameState.player.name];
  const marinaInRoom = gameState.npcs.some(n => n.name === '–ú–∞—Ä–∏–Ω–∞' && n._spawned && n.at === idx);

  if (npcsHere + 1 > roomLimit) {
    showEvent(
      `–í –∫–æ–º–Ω–∞—Ç–µ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π (${roomLimit}). –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ –≤—ã–π–¥–µ—Ç!`,
      [{ text: 'OK', action: () => {} }]
    );
    return;
  }

  if (
    idx === AQUARIUM_ID &&
    marinaInRoom &&
    !allowedWithMarina.includes(gameState.player.name)
  ) {
    showEvent(
      '–ú–∞—Ä–∏–Ω–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º!',
      [{ text: 'OK', action: () => {} }]
    );
    return;
  }

  gameState.player.at = idx;
  renderAll();
  checkEvents();
}


// --------- –î–ï–ô–°–¢–í–ò–Ø –í –ö–û–ú–ù–ê–¢–ê–• -----------

/**
 * –°–¥–µ–ª–∞—Ç—å —Ü–≤–µ—Ç–æ–ø—Ä–æ–±—É ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞, –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–≤–µ—Å—Ç–∞.
 */
function makeProba() {
  if (!gameState.player.inventory.includes('—Ü–≤–µ—Ç–æ–ø—Ä–æ–±–∞')) {
    gameState.player.inventory.push('—Ü–≤–µ—Ç–æ–ø—Ä–æ–±–∞');
    // –ï—Å–ª–∏ –∫–≤–µ—Å—Ç –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, —Å–¥–µ–ª–∞—Ç—å "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" (–µ—Å–ª–∏ —Ç–∞–∫ –ø—Ä–∏–Ω—è—Ç–æ)
    if (gameState.player.quests.proba === 'inprogress') {
      gameState.player.quests.proba = 'done';
    }
  }
  showEvent('–í—ã —Å–¥–µ–ª–∞–ª–∏ —Ü–≤–µ—Ç–æ–ø—Ä–æ–±—É!', [{ text: '–û–∫', action: renderAll }]);
}

/**
 * –°–¥–µ–ª–∞—Ç—å –ª–∞–∫ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–≤–µ—Å—Ç.
 */
function makeLak() {
  if (!gameState.player.inventory.includes('–ª–∞–∫')) {
    gameState.player.inventory.push('–ª–∞–∫');
    // –ï—Å–ª–∏ –∫–≤–µ—Å—Ç –ø—Ä–æ –ª–∞–∫ –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º?
    if (gameState.player.quests.lak === 'inprogress') {
      gameState.player.quests.lak = 'done';
    }
  }
  showEvent('–õ–∞–∫ –ø–æ–∫—Ä—ã—Ç!', [{ text: '–û–∫', action: renderAll }]);
}



// ============= –õ–û–ì–ò–ö–ê NPC, –ö–í–ï–°–¢–û–í, –°–û–ë–´–¢–ò–ô ==========

/**
 * –ü–æ–ª—É—á–∏—Ç—å NPC –ø–æ –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∑–∞—Å–ø–∞—É–Ω–µ–Ω)
 * @param {string} name
 * @returns {Object|null}
 */
function getNPC(name) {
  return gameState.npcs.find(n => n._spawned && n.name === name) || null;
}

function checkEvents() {
  const player = gameState.player;

  // --- –ö–ê–¢–Ø ---
  const katya = getNPC('–ö–∞—Ç—è');
  if (katya && player.at === katya.at) {
    if (!player.quests.proba) {
      showEventNPC(randDialog(katya), [{
        text: '–û–∫!',
        action: () => { katya.follow = true; player.quests.proba = 'inprogress'; }
      }], katya);
      return;
    }
    if (player.quests.proba === 'inprogress' && player.inventory.includes('—Ü–≤–µ—Ç–æ–ø—Ä–æ–±–∞')) {
      showEventNPC(randDialog(katya), [{
        text: '–û—Ç–¥–∞—Ç—å',
        action: () => {
          katya.follow = false;
          player.inventory = player.inventory.filter(x => x !== '—Ü–≤–µ—Ç–æ–ø—Ä–æ–±–∞');
          player.quests.proba = 'done';
          renderAll();
        }
      }], katya);
      return;
    }
  }

  // --- –°–í–ï–¢–õ–ê–ù–ê ---
  const svetlana = getNPC('–°–≤–µ—Ç–ª–∞–Ω–∞');
  if (svetlana && player.at === svetlana.at && !svetlana.said) {
    player.busy = true;
    showEventNPC(randDialog(svetlana), [
      {
        text: '–•–æ—Ä–æ—à–æ, –º—ã –ø–æ–ø—Ä–æ–±—É–µ–º –≤–∞–º –ø–æ–º–æ—á—å',
        action: () => { svetlana.said = true; player.busy = false; }
      },
      {
        text: '–ù–µ—Ç, —è –Ω–µ –±—É–¥—É, –∏–¥–∏—Ç–µ –∫ –í–∏–∫—Ç–æ—Ä—É!',
        action: () => { svetlana.said = false; checkEvents(); }
      }
    ], svetlana);
    return;
  }

  // --- –ú–ê–†–ò–ù–ê ---
  const marina = getNPC('–ú–∞—Ä–∏–Ω–∞');
  if (marina && player.at === marina.at) {
    if (player.inventory.length) {
      const lost = player.inventory.slice();
      player.inventory = [];
      player.stress += 10;
      showEventNPC(
        randDialog(marina) + `<br>–¢—ã —Ç–µ—Ä—è–µ—à—å: <b>${lost.join(', ')}</b>. (—Å—Ç—Ä–µ—Å—Å +10)`,
        [{ text: '–û–∫', action: () => {} }],
        marina
      );
    } else {
      showEventNPC(
        randDialog(marina) + "<br>–£ —Ç–µ–±—è –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –∏–¥–∏!",
        [{ text: '–û–∫', action: () => {} }],
        marina
      );
    }
    return;
  }

  // --- –ê–†–°–ï–ù–ò–ô ---
  const arseniy = getNPC('–ê—Ä—Å–µ–Ω–∏–π');
  if (arseniy && player.at === arseniy.at && player.quests.proba === 'inprogress' && !player.inventory.includes('—Ü–≤–µ—Ç–æ–ø—Ä–æ–±–∞')) {
    player.inventory.push('—Ü–≤–µ—Ç–æ–ø—Ä–æ–±–∞');
    showEventNPC(randDialog(arseniy), [{ text: '–°–ø–∞—Å–∏–±–æ', action: () => { } }], arseniy);
    return;
  }

  // --- –ê–õ–ï–ö–°–ê–ù–î–† –ö–ò–† ---
  const kir = getNPC('–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö–∏—Ä');
  if (kir && player.at === kir.at) {
    player.stress += 15;
    showEventNPC(randDialog(kir), [{ text: '–ü–æ—Å–∫–æ—Ä–µ–µ —É–π—Ç–∏', action: () => { } }], kir);
    return;
  }

  // --- –ü–û–õ–ò–ù–ê ---
  const polina = getNPC('–ü–æ–ª–∏–Ω–∞');
  if (polina && player.at === polina.at) {
    player.stress = Math.max(0, player.stress - 7);
    showEventNPC(randDialog(polina), [{ text: '–£–ª—ã–±–Ω—É—Ç—å—Å—è', action: () => { } }], polina);
    return;
  }

  // --- –°–ê–®–ê –•–ê ---
  const sashaHa = getNPC('–°–∞—à–∞ –•–∞');
  if (sashaHa && player.at === sashaHa.at) {
    player.stress = Math.max(0, player.stress - 9);
    showEventNPC(randDialog(sashaHa), [{ text: '–° –∫—É–ª–∞–∫–æ–º! —Ç—ã–¥—ã—â—å!', action: () => { } }], sashaHa);
    return;
  }

  // --- –°–ï–†–ì–ï–ô –ê–° ---
  const sergeyAs = getNPC('–°–µ—Ä–≥–µ–π –ê—Å');
  if (sergeyAs && player.at === sergeyAs.at && !sergeyAs.said) {
    showEventNPC(randDialog(sergeyAs), [{ text: '–ü–æ–Ω—è–ª!', action: () => { sergeyAs.said = true; } }], sergeyAs);
    return;
  }

  // --- –í–õ–ê–î–ò–ú–ò–† ---
  const vladimir = getNPC('–í–ª–∞–¥–∏–º–∏—Ä');
  if (vladimir && player.at === vladimir.at && !vladimir.said) {
    showEventNPC(randDialog(vladimir), [{ text: '–ü–æ–∂–∞–ª—É–π', action: () => { vladimir.said = true; } }], vladimir);
    return;
  }

  // --- –ê–ù–¢–û–ù ---
  const anton = getNPC('–ê–Ω—Ç–æ–Ω');
  if (anton && player.at === anton.at && player.quests.proba === 'done' && !player.inventory.includes('–ª–∞–∫')) {
    showEventNPC(randDialog(anton), [{ text: '–ü–æ–π–¥—É –¥–µ–ª–∞—Ç—å –ª–∞–∫', action: () => { } }], anton);
    return;
  }
  // --- –ê–ù–¢–û–ù, –ª–∞–∫ —Å–¥–∞—ë–º ---
  if (anton && player.inventory.includes('–ª–∞–∫') && player.at === anton.at) {
    showEventNPC(randDialog(anton), [{
      text: 'OK',
      action: () => {
        player.inventory = player.inventory.filter(x => x !== '–ª–∞–∫');
        player.quests.lak = 'done';
        renderAll();
      }
    }], anton);
    return;
  }

  // --- –ë–û–°–° –í–∏–∫—Ç–æ—Ä ---
  const viktor = getNPC('–í–∏–∫—Ç–æ—Ä');
  if (viktor && player.at === viktor.at) {
    if (player.quests.proba === 'done' && player.quests.lak === 'done') {
      startQuizBOSS(viktor);
      return;
    } else {
      showEventNPC(
        '–í–∏–∫—Ç–æ—Ä: ‚Äú–¢—ã –Ω–µ –≤—Å—ë —Å–¥–µ–ª–∞–ª.<br>–ì–¥–µ —Ü–≤–µ—Ç–æ–ø—Ä–æ–±–∞ –∏ –ª–∞–∫?‚Äù (–≤–µ—Ä–Ω—É—Ç—å—Å—è!)',
        [{ text: '–£—à–µ–ª', action: () => { player.stress += 8; } }],
        viktor
      );
      return;
    }
  }
}



// ==== –ú–û–î–ê–õ–ö–ê –î–ò–ê–õ–û–ì–ê –° –§–û–¢–û NPC ===

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–±—ã—Ç–∏—è/–¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ—Ä—Ç—Ä–µ—Ç–æ–º NPC
 * @param {string} text ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
 * @param {Array} opts ‚Äî –º–∞—Å—Å–∏–≤ –æ–ø—Ü–∏–π-–∫–Ω–æ–ø–æ–∫: [{text, action: function}]
 * @param {object} npc ‚Äî NPC, –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
 */
function showEventNPC(text, opts, npc) {
  gameState.dialogOpen = true;
  gameState.player.busy = true;
  document.getElementById('eventBox').style.display = 'block';

  if (npc && npc.portrait) {
    document.getElementById('eventPortrait').innerHTML =
      `<img src="${npc.portrait}" alt="${npc.name}" style="max-width:130px;max-height:130px;border-radius:15px;box-shadow:0 2px 18px #4689ff27;margin:6px auto 9px auto;display:block;">`;
  } else {
    document.getElementById('eventPortrait').innerHTML = "";
  }

  document.getElementById('eventText').innerHTML = text;

  document.getElementById('eventOptions').innerHTML = opts.map((o, i) =>
    `<button class="actionBtn" onclick="eventAction(${i})">${o.text}</button>`
  ).join('');
  window._eventOpts = opts; // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ gameState, –µ—Å–ª–∏ –≥–ª–æ–±–∞–ª-–æ–±–ª–∞—Å—Ç—å –Ω–µ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ (–±–µ–∑ –ø–æ—Ä—Ç—Ä–µ—Ç–∞)
 */
function showEvent(text, opts) {
  gameState.dialogOpen = true;
  gameState.player.busy = true;
  document.getElementById('eventBox').style.display = 'block';
  document.getElementById('eventPortrait').innerHTML = "";
  document.getElementById('eventText').innerHTML = text;
  document.getElementById('eventOptions').innerHTML = opts.map((o, i) =>
    `<button class="actionBtn" onclick="eventAction(${i})">${o.text}</button>`
  ).join('');
  window._eventOpts = opts;
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ –≤ –º–æ–¥–∞–ª–∫–µ
 */
window.eventAction = function(idx) {
  document.getElementById('eventBox').style.display = 'none';
  if (!window._eventOpts) return;
  const opt = window._eventOpts[idx];
  if (opt && typeof opt.action === 'function') opt.action();
  gameState.player.busy = false;
  gameState.dialogOpen = false;
  renderAll();
};



// –ë–ª–∏—Ü –æ—Ç –±–æ—Å—Å–∞ -- –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è, —Å–º. —Ç–≤–æ–π –∏—Å—Ö–æ–¥–Ω–∏–∫ –≤—ã—à–µ

// –®–∞—Ñ–ª (–ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ)
function shuffle(array) {
  let arr = array.slice();
  for (let i = arr.length - 1; i > 0; i--) {
    let j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
  return arr;
}

// –ë–ª–∏—Ü –æ—Ç –±–æ—Å—Å–∞ / Boss Quiz
function startQuizBOSS(bossNpc){
  let questions = shuffle(BOSS_QUIZ.slice());
  let cur = 0;
  let timer = null;
  let isAnswered = false;

  function failQuiz(){
    if(timer) clearInterval(timer);
    gameState.player.quests.boss = false;
    gameState.quizInProgress = false;
    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∏–≥—Ä–æ–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–∞ –±–æ—Å—Å–∞
    if(gameState.lastRoomBeforeBoss !== null && typeof gameState.lastRoomBeforeBoss !== 'undefined') {
      gameState.player.at = gameState.lastRoomBeforeBoss;
      gameState.lastRoomBeforeBoss = null;
    }
    renderAll();
    showEvent(
      `–í—ã –æ—à–∏–±–ª–∏—Å—å! –ü—Ä–æ–π—Ç–∏ –±–ª–∏—Ü –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤–∏–∑–∏—Ç–µ –∫ –±–æ—Å—Å—É.`,
      [{text:'–û–∫',action:()=>{}}],
    );
  }

  function winQuiz(){
    if(timer) clearInterval(timer);
    gameState.player.quests.boss = 'done';
    gameState.player.end = true;
    gameState.quizInProgress = false;
    renderAll();
    setTimeout(()=>{
      showEventNPC(
        `–í–∏–∫—Ç–æ—Ä: ‚Äú–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –†–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω.<br>
        <b>–¢—ã –≤—ã–∏–≥—Ä–∞–ª! üèÜ</b>"`,
        [{text:'–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ',action:resetGame}],
        bossNpc
      );
    }, 400);
  }

  function showQ() {
    if(timer) clearInterval(timer); // —Å—Ç–æ–ø
    isAnswered = false;
    if(cur >= 7) return winQuiz();

    let timeLeft = 10;
    let q = questions[cur], vars = shuffle(q.answers.slice());

    let qt = `<b>–í–æ–ø—Ä–æ—Å ${cur+1} –∏–∑ 7:</b><br>${q.question}` +
      `<br><span style="color:#888;font-size:11px;">–í—Ä–µ–º—è: <span id="qTimer">${timeLeft}</span> —Å–µ–∫</span>`;
    let opts = vars.map(a=>({
      text: a.text,
      action: ()=>{
        if(isAnswered) return;
        isAnswered = true;
        if(timer) clearInterval(timer);
        if(a.correct){
          cur++;
          setTimeout(showQ, 300);
        } else {
          failQuiz();
        }
      }
    }));

    showEventNPC(qt, opts, bossNpc);

    timer = setInterval(()=>{
      timeLeft--;
      let t=document.getElementById('qTimer');
      if(t) t.innerText = timeLeft;
      if(timeLeft<=0 && !isAnswered){
        clearInterval(timer);
        isAnswered = true;
        failQuiz();
      }
    },1000);
  }

  showQ();
}



// --- –ë–ª–∏—Ü –≤–æ–ø—Ä–æ—Å—ã –í–∏–∫—Ç–æ—Ä–∞
const BOSS_QUIZ = [
  {
    question: "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç C –≤ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–µ CMYK?",
    answers: [
      { text: "C = –¶–∏–∞–Ω", correct: true },
      { text: "C = Color", correct: false },
      { text: "C = –°–∏–Ω–∏–π", correct: false },
      { text: "C = Contour", correct: false }
    ]
  },
  {
    question: "–ß—Ç–æ —Ç–∞–∫–æ–µ Pantone?",
    answers: [
      { text: "–°–ø–µ—Ü–ø–∞–ª–∏—Ç—Ä–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ñ–∏—Ä–º–µ–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤", correct: true },
      { text: "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç —Ü–≤–µ—Ç–æ–ø–µ—Ä–µ–¥–∞—á–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏", correct: false },
      { text: "–¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–æ–π –±—É–º–∞–≥–∏", correct: false },
      { text: "–¢–∞–±–ª–∏—Ü–∞ –æ—Ç—Ç–µ–Ω–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–∞–∫–æ–≤—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π", correct: false }
    ]
  },
  {
    question: "–ß—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–∞–∫–µ—Ç–∞ –≤ –ø–µ—á–∞—Ç—å?",
    answers: [
      { text: "CMYK, –æ–±—Ä–µ–∑–Ω—ã–µ –º–µ—Ç–∫–∏, –±–µ–∑ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–µ–π", correct: true },
      { text: "–í—ã–ø—É—Å–∫–∏ –ø–æ–¥ –æ–±—Ä–µ–∑, —Ü–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏, –±–µ–∑ –æ–±–≤–æ–¥–æ–∫", correct: false },
      { text: "CMYK, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, —Å —Ç–µ–Ω—è–º–∏ –∏ –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º", correct: false },
      { text: "–í—ã–ø—É—Å–∫–∏ –ø–æ–¥ –æ–±—Ä–µ–∑, —Ä–µ–∂—É—â–∏–µ –ª–∏–Ω–∏–∏, –±–µ–∑ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–µ–π", correct: false }
    ]
  },
  {
    question: "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–æ–ø–µ—á–∞—Ç–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞?",
    answers: [
      { text: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞ –ø–µ—Ä–µ–¥ –ø–µ—á–∞—Ç—å—é", correct: true },
      { text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±—É–º–∞–≥–∏ –∏ —Ä–µ–∑–∫–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏", correct: false },
      { text: "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –º–∞–∫–µ—Ç–∞ –∏ —Ç–∏–ø–∞ –ª–∞–∫–∞", correct: false },
      { text: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–≤–µ—Ç–æ–ø–µ—Ä–µ–¥–∞—á–∏ –∏ –≤—ã–ø—É—Å–∫–æ–≤ –ø–æ–¥ –æ–±—Ä–µ–∑", correct: false }
    ]
  },
  {
    question: "–ü–æ—á–µ–º—É PDF –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ –¥–ª—è –æ—Ñ—Å–µ—Ç–Ω–æ–π –ø–µ—á–∞—Ç–∏?",
    answers: [
      { text: "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–µ–∫—Ç–æ—Ä –∏ —à—Ä–∏—Ñ—Ç—ã", correct: true },
      { text: "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏ –º–∞–∫–µ—Ç—ã", correct: false },
      { text: "–£–¥–æ–±–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –∏ –æ—Ç—Å—Ç—É–ø—ã", correct: false },
      { text: "–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –º–∞–∫–µ—Ç—ã –±–µ–∑ –∏—Å–∫–∞–∂–µ–Ω–∏–π", correct: false }
    ]
  },
  {
    question: "–ó–∞—á–µ–º –Ω—É–∂–Ω—ã –ø–ª–∞—à–µ—á–Ω—ã–µ —Ü–≤–µ—Ç–∞?",
    answers: [
      { text: "–î–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ–∏—Ä–º–µ–Ω–Ω—ã—Ö –æ—Ç—Ç–µ–Ω–∫–æ–≤", correct: true },
      { text: "–î–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã—Ö —Ç–µ–Ω–µ–π –∏ –±–ª–∏–∫–æ–≤", correct: false },
      { text: "–î–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ç–æ—á–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤—ã—Ö —Å–º–µ—Å–µ–π –≤ –º–∞–∫–µ—Ç–µ", correct: false },
      { text: "–î–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∏–∑–∞–π–Ω–∞", correct: false }
    ]
  },
  {
    question: "–ß—Ç–æ —Ç–∞–∫–æ–µ –ª–∞–∫–∏—Ä–æ–≤–∫–∞?",
    answers: [
      { text: "–ù–∞–Ω–µ—Å–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–∞ —Ç–∏—Ä–∞–∂", correct: true },
      { text: "–ü–æ–∫—Ä—ã—Ç–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–∞–≤–æ–º", correct: false },
      { text: "–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–æ–≤–æ–π –∏–ª–∏ –≥–ª—è–Ω—Ü–µ–≤–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –º–∞–∫–µ—Ç–∞", correct: false },
      { text: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø–µ—á–∞—Ç–∫–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∏–∑–Ω–æ—Å–æ—Å—Ç–æ–π–∫–æ—Å—Ç–∏", correct: false }
    ]
  }
];


// --- –ë–ª–∏—Ü-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å –±–æ—Å—Å–æ–º
function startQuizBOSS(bossNpc){
  let questions = shuffle(BOSS_QUIZ.slice());
  let cur = 0;
  let timer = null;
  let isAnswered = false;

  function failQuiz(){
    if(timer) clearInterval(timer);
    gameState.player.quests.boss = false; // —Å–±—Ä–æ—Å –∫–≤–µ—Å—Ç–∞!
    gameState.player.end = false;
    gameState.dialogOpen = true;
    gameState.player.busy = true;
    showEventNPC(
      `–¢—ã –æ—à–∏–±—Å—è –∏–ª–∏ –Ω–µ —É—Å–ø–µ–ª!<br>–ì–æ—Ç–æ–≤ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?`,
      [{text:'–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ', action:()=> {
        gameState.dialogOpen = false;
        gameState.player.busy = false;
        startQuizBOSS(bossNpc);
      }}],
      bossNpc
    );
  }

  function winQuiz(){
    if(timer) clearInterval(timer);
    gameState.player.quests.boss = 'done';
    gameState.player.end = true;
    gameState.dialogOpen = true;
    gameState.player.busy = true;
    showEventNPC(
      `–í–∏–∫—Ç–æ—Ä: ‚Äú–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –†–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω.<br>
      <b>–¢—ã –≤—ã–∏–≥—Ä–∞–ª! üèÜ</b>‚Äù`,
      [{text:'–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ',action:resetGame}],
      bossNpc
    );
  }

  function showQ() {
    if(timer) clearInterval(timer);
    isAnswered = false;
    if(cur >= 7) return winQuiz();

    let timeLeft = 10;
    let q = questions[cur], vars = shuffle(q.answers.slice());

    let qt = `<b>–í–æ–ø—Ä–æ—Å ${cur+1} –∏–∑ 7:</b><br>${q.question}` +
      `<br><span style="color:#888;font-size:11px;">–í—Ä–µ–º—è: <span id="qTimer">${timeLeft}</span> —Å–µ–∫</span>`;
    let opts = vars.map(a=>({
      text: a.text,
      action: ()=>{
        if(isAnswered) return;
        isAnswered = true;
        if(timer) clearInterval(timer);
        if(a.correct){
          cur++;
          setTimeout(showQ, 300);
        } else {
          failQuiz();
        }
      }
    }));

    showEventNPC(qt, opts, bossNpc);

    timer = setInterval(()=>{
      timeLeft--;
      let t=document.getElementById('qTimer');
      if(t) t.innerText = timeLeft;
      if(timeLeft<=0 && !isAnswered){
        clearInterval(timer);
        isAnswered = true;
        failQuiz();
      }
    },1000);
  }

  showQ();
}

// ============= –°–ü–†–ê–í–ö–ê/–õ–ï–ì–ï–ù–î–ê ==============
function legendOpen(){
  let html = "<b>–õ–æ–∫–∞—Ü–∏–∏:</b><ul>";
  ROOMS.forEach(r=>{
    html+=`<li><b>${r.name}</b> ${r.icon}: <span class='actor-desc'>${r.desc}</span></li>`;
  });
  html += "</ul><b>–ü–µ—Ä—Å–æ–Ω–∞–∂–∏:</b><ul>";
  NPCS_FULL.forEach(n=>{
    html+=`<li>${n.icon}<b> ${n.name}</b>: <span class='actor-desc'>${n.desc}</span></li>`;
  });
  html += "</ul>";
  document.getElementById("legendCont").innerHTML = html;
  document.getElementById("descModal").style.display='flex';
}
function legendClose(){
  document.getElementById("descModal").style.display='none';
}

// --- –°—Ç–∞—Ä—Ç ---
window.onload = () => {
  document.getElementById('eventBox').style.display = 'none';
  resetGame();
};
